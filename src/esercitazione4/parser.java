
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package esercitazione4;

import java_cup.runtime.*;
import classNode.Expression.*;
import classNode.DeclarationNode.*;
import classNode.jumpStatement.*;
import classNode.main.*;
import classNode.Stat.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\115\000\002\032\010\000\002\002\004\000\002\031" +
    "\004\000\002\031\004\000\002\031\002\000\002\030\004" +
    "\000\002\030\002\000\002\027\006\000\002\026\005\000" +
    "\002\026\007\000\002\026\003\000\002\026\005\000\002" +
    "\002\003\000\002\002\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\025\011\000\002\025\010\000\002\024\005\000\002\024" +
    "\003\000\002\023\005\000\002\022\005\000\002\022\003" +
    "\000\002\021\003\000\002\021\004\000\002\012\004\000" +
    "\002\012\002\000\002\020\006\000\002\017\004\000\002" +
    "\017\002\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\006\000\002\015\004\000\002\015\012" +
    "\000\002\015\010\000\002\015\010\000\002\015\005\000" +
    "\002\014\005\000\002\014\003\000\002\013\005\000\002" +
    "\013\003\000\002\004\006\000\002\004\005\000\002\016" +
    "\006\000\002\016\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\004\000" +
    "\002\003\004\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\007\003\000\002\007\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\220\000\004\004\005\001\002\000\004\002\222\001" +
    "\002\000\010\005\ufffd\017\011\060\006\001\002\000\010" +
    "\010\ufff7\036\111\056\221\001\002\000\004\010\214\001" +
    "\002\000\010\005\ufffd\017\011\060\006\001\002\000\004" +
    "\060\157\001\002\000\004\005\015\001\002\000\010\005" +
    "\ufffd\017\011\060\006\001\002\000\004\005\ufffe\001\002" +
    "\000\036\006\ufffb\020\ufffb\030\ufffb\034\ufffb\037\ufffb\041" +
    "\ufffb\054\ufffb\060\ufffb\061\ufffb\062\ufffb\063\ufffb\064\ufffb" +
    "\065\ufffb\066\ufffb\001\002\000\036\006\uffdb\020\042\030" +
    "\037\034\026\037\030\041\023\054\025\060\032\061\017" +
    "\062\033\063\021\064\027\065\035\066\044\001\002\000" +
    "\050\007\uffe9\010\uffe9\016\uffe9\021\uffe9\025\uffe9\026\uffe9" +
    "\027\uffe9\030\uffe9\032\uffe9\033\uffe9\044\uffe9\045\uffe9\046" +
    "\uffe9\047\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9\056\uffe9" +
    "\001\002\000\040\006\uffdb\020\042\023\uffdb\030\037\034" +
    "\026\037\030\041\023\054\025\060\154\061\017\062\033" +
    "\063\021\064\027\065\035\066\044\001\002\000\050\007" +
    "\uffeb\010\uffeb\016\uffeb\021\uffeb\025\uffeb\026\uffeb\027\uffeb" +
    "\030\uffeb\032\uffeb\033\uffeb\044\uffeb\045\uffeb\046\uffeb\047" +
    "\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb\056\uffeb\001\002" +
    "\000\050\007\uffc1\010\uffc1\016\uffc1\021\uffc1\025\uffc1\026" +
    "\uffc1\027\uffc1\030\uffc1\032\uffc1\033\uffc1\044\uffc1\045\uffc1" +
    "\046\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1\056" +
    "\uffc1\001\002\000\004\020\146\001\002\000\004\006\145" +
    "\001\002\000\026\020\042\030\037\054\025\060\046\061" +
    "\017\062\033\063\021\064\027\065\035\066\044\001\002" +
    "\000\026\020\042\030\037\054\025\060\046\061\017\062" +
    "\033\063\021\064\027\065\035\066\044\001\002\000\050" +
    "\007\uffee\010\uffee\016\uffee\021\uffee\025\uffee\026\uffee\027" +
    "\uffee\030\uffee\032\uffee\033\uffee\044\uffee\045\uffee\046\uffee" +
    "\047\uffee\050\uffee\051\uffee\052\uffee\053\uffee\056\uffee\001" +
    "\002\000\004\020\127\001\002\000\044\007\uffce\016\125" +
    "\021\uffce\025\uffce\026\uffce\027\060\030\054\032\066\033" +
    "\064\044\065\045\056\046\071\047\061\050\057\051\070" +
    "\052\053\053\072\001\002\000\054\010\ufff7\016\uffc3\020" +
    "\112\024\uffd0\025\uffc3\026\uffc3\027\uffc3\030\uffc3\032\uffc3" +
    "\033\uffc3\035\uffd0\036\111\044\uffc3\045\uffc3\046\uffc3\047" +
    "\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3\056\113\001\002" +
    "\000\050\007\uffec\010\uffec\016\uffec\021\uffec\025\uffec\026" +
    "\uffec\027\uffec\030\uffec\032\uffec\033\uffec\044\uffec\045\uffec" +
    "\046\uffec\047\uffec\050\uffec\051\uffec\052\uffec\053\uffec\056" +
    "\uffec\001\002\000\040\006\ufffc\020\ufffc\023\ufffc\030\ufffc" +
    "\034\ufffc\037\ufffc\041\ufffc\054\ufffc\060\ufffc\061\ufffc\062" +
    "\ufffc\063\ufffc\064\ufffc\065\ufffc\066\ufffc\001\002\000\050" +
    "\007\uffed\010\uffed\016\uffed\021\uffed\025\uffed\026\uffed\027" +
    "\uffed\030\uffed\032\uffed\033\uffed\044\uffed\045\uffed\046\uffed" +
    "\047\uffed\050\uffed\051\uffed\052\uffed\053\uffed\056\uffed\001" +
    "\002\000\004\007\110\001\002\000\026\020\042\030\037" +
    "\054\025\060\046\061\017\062\033\063\021\064\027\065" +
    "\035\066\044\001\002\000\006\025\103\026\104\001\002" +
    "\000\006\024\076\035\077\001\002\000\026\020\042\030" +
    "\037\054\025\060\046\061\017\062\033\063\021\064\027" +
    "\065\035\066\044\001\002\000\050\007\uffc2\010\uffc2\016" +
    "\uffc2\021\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\032\uffc2" +
    "\033\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051" +
    "\uffc2\052\uffc2\053\uffc2\056\uffc2\001\002\000\050\007\uffea" +
    "\010\uffea\016\uffea\021\uffea\025\uffea\026\uffea\027\uffea\030" +
    "\uffea\032\uffea\033\uffea\044\uffea\045\uffea\046\uffea\047\uffea" +
    "\050\uffea\051\uffea\052\uffea\053\uffea\056\uffea\001\002\000" +
    "\034\021\067\027\060\030\054\032\066\033\064\044\065" +
    "\045\056\046\071\047\061\050\057\051\070\052\053\053" +
    "\072\001\002\000\052\007\uffc3\010\uffc3\016\uffc3\020\047" +
    "\021\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\032\uffc3\033" +
    "\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3" +
    "\052\uffc3\053\uffc3\056\uffc3\001\002\000\030\020\042\021" +
    "\051\030\037\054\025\060\046\061\017\062\033\063\021" +
    "\064\027\065\035\066\044\001\002\000\004\021\052\001" +
    "\002\000\050\007\uffcc\010\uffcc\016\uffcc\021\uffcc\025\uffcc" +
    "\026\uffcc\027\uffcc\030\uffcc\032\uffcc\033\uffcc\044\uffcc\045" +
    "\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc" +
    "\056\uffcc\001\002\000\050\007\uffcd\010\uffcd\016\uffcd\021" +
    "\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\032\uffcd\033\uffcd" +
    "\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd\052" +
    "\uffcd\053\uffcd\056\uffcd\001\002\000\026\020\uffbc\030\uffbc" +
    "\054\uffbc\060\uffbc\061\uffbc\062\uffbc\063\uffbc\064\uffbc\065" +
    "\uffbc\066\uffbc\001\002\000\026\020\uffbf\030\uffbf\054\uffbf" +
    "\060\uffbf\061\uffbf\062\uffbf\063\uffbf\064\uffbf\065\uffbf\066" +
    "\uffbf\001\002\000\026\020\042\030\037\054\025\060\046" +
    "\061\017\062\033\063\021\064\027\065\035\066\044\001" +
    "\002\000\026\020\uffb9\030\uffb9\054\uffb9\060\uffb9\061\uffb9" +
    "\062\uffb9\063\uffb9\064\uffb9\065\uffb9\066\uffb9\001\002\000" +
    "\026\020\uffb6\030\uffb6\054\uffb6\060\uffb6\061\uffb6\062\uffb6" +
    "\063\uffb6\064\uffb6\065\uffb6\066\uffb6\001\002\000\026\020" +
    "\uffc0\030\uffc0\054\uffc0\060\uffc0\061\uffc0\062\uffc0\063\uffc0" +
    "\064\uffc0\065\uffc0\066\uffc0\001\002\000\026\020\uffb7\030" +
    "\uffb7\054\uffb7\060\uffb7\061\uffb7\062\uffb7\063\uffb7\064\uffb7" +
    "\065\uffb7\066\uffb7\001\002\000\026\020\042\030\037\054" +
    "\025\060\046\061\017\062\033\063\021\064\027\065\035" +
    "\066\044\001\002\000\026\020\042\030\037\054\025\060" +
    "\046\061\017\062\033\063\021\064\027\065\035\066\044" +
    "\001\002\000\026\020\uffbd\030\uffbd\054\uffbd\060\uffbd\061" +
    "\uffbd\062\uffbd\063\uffbd\064\uffbd\065\uffbd\066\uffbd\001\002" +
    "\000\026\020\uffba\030\uffba\054\uffba\060\uffba\061\uffba\062" +
    "\uffba\063\uffba\064\uffba\065\uffba\066\uffba\001\002\000\026" +
    "\020\uffbe\030\uffbe\054\uffbe\060\uffbe\061\uffbe\062\uffbe\063" +
    "\uffbe\064\uffbe\065\uffbe\066\uffbe\001\002\000\050\007\uffc6" +
    "\010\uffc6\016\uffc6\021\uffc6\025\uffc6\026\uffc6\027\uffc6\030" +
    "\uffc6\032\uffc6\033\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6" +
    "\050\uffc6\051\uffc6\052\uffc6\053\uffc6\056\uffc6\001\002\000" +
    "\026\020\uffb5\030\uffb5\054\uffb5\060\uffb5\061\uffb5\062\uffb5" +
    "\063\uffb5\064\uffb5\065\uffb5\066\uffb5\001\002\000\026\020" +
    "\uffb8\030\uffb8\054\uffb8\060\uffb8\061\uffb8\062\uffb8\063\uffb8" +
    "\064\uffb8\065\uffb8\066\uffb8\001\002\000\026\020\uffbb\030" +
    "\uffbb\054\uffbb\060\uffbb\061\uffbb\062\uffbb\063\uffbb\064\uffbb" +
    "\065\uffbb\066\uffbb\001\002\000\050\007\uffc7\010\uffc7\016" +
    "\uffc7\021\uffc7\025\uffc7\026\uffc7\027\060\030\054\032\066" +
    "\033\064\044\065\045\056\046\071\047\061\050\057\051" +
    "\070\052\uffc7\053\uffc7\056\uffc7\001\002\000\050\007\uffc8" +
    "\010\uffc8\016\uffc8\021\uffc8\025\uffc8\026\uffc8\027\060\030" +
    "\054\032\066\033\064\044\065\045\056\046\071\047\061" +
    "\050\057\051\070\052\053\053\072\056\uffc8\001\002\000" +
    "\050\007\uffc9\010\uffc9\016\uffc9\021\uffc9\025\uffc9\026\uffc9" +
    "\027\060\030\054\032\066\033\064\044\065\045\056\046" +
    "\071\047\061\050\057\051\070\052\053\053\072\056\uffc9" +
    "\001\002\000\004\007\102\001\002\000\026\020\042\030" +
    "\037\054\025\060\046\061\017\062\033\063\021\064\027" +
    "\065\035\066\044\001\002\000\004\007\101\001\002\000" +
    "\040\006\uffd7\020\uffd7\023\uffd7\030\uffd7\034\uffd7\037\uffd7" +
    "\041\uffd7\054\uffd7\060\uffd7\061\uffd7\062\uffd7\063\uffd7\064" +
    "\uffd7\065\uffd7\066\uffd7\001\002\000\040\006\uffda\020\uffda" +
    "\023\uffda\030\uffda\034\uffda\037\uffda\041\uffda\054\uffda\060" +
    "\uffda\061\uffda\062\uffda\063\uffda\064\uffda\065\uffda\066\uffda" +
    "\001\002\000\004\007\106\001\002\000\004\007\105\001" +
    "\002\000\040\006\uffd8\020\uffd8\023\uffd8\030\uffd8\034\uffd8" +
    "\037\uffd8\041\uffd8\054\uffd8\060\uffd8\061\uffd8\062\uffd8\063" +
    "\uffd8\064\uffd8\065\uffd8\066\uffd8\001\002\000\040\006\uffd9" +
    "\020\uffd9\023\uffd9\030\uffd9\034\uffd9\037\uffd9\041\uffd9\054" +
    "\uffd9\060\uffd9\061\uffd9\062\uffd9\063\uffd9\064\uffd9\065\uffd9" +
    "\066\uffd9\001\002\000\050\007\uffc5\010\uffc5\016\uffc5\021" +
    "\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\032\uffc5\033\uffc5" +
    "\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5\052" +
    "\uffc5\053\uffc5\056\uffc5\001\002\000\040\006\uffd6\020\uffd6" +
    "\023\uffd6\030\uffd6\034\uffd6\037\uffd6\041\uffd6\054\uffd6\060" +
    "\uffd6\061\uffd6\062\uffd6\063\uffd6\064\uffd6\065\uffd6\066\uffd6" +
    "\001\002\000\026\020\042\030\037\054\025\060\046\061" +
    "\017\062\033\063\021\064\027\065\035\066\044\001\002" +
    "\000\030\020\042\021\120\030\037\054\025\060\046\061" +
    "\017\062\033\063\021\064\027\065\035\066\044\001\002" +
    "\000\004\060\114\001\002\000\014\010\ufff7\024\uffd0\035" +
    "\uffd0\036\111\056\113\001\002\000\004\010\ufff9\001\002" +
    "\000\006\024\uffd1\035\uffd1\001\002\000\004\021\121\001" +
    "\002\000\042\007\uffca\016\uffcc\025\uffcc\026\uffcc\027\uffcc" +
    "\030\uffcc\032\uffcc\033\uffcc\044\uffcc\045\uffcc\046\uffcc\047" +
    "\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\001\002\000\042" +
    "\007\uffcb\016\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\032" +
    "\uffcd\033\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd" +
    "\051\uffcd\052\uffcd\053\uffcd\001\002\000\036\010\ufff6\027" +
    "\060\030\054\032\066\033\064\044\065\045\056\046\071" +
    "\047\061\050\057\051\070\052\053\053\072\056\123\001" +
    "\002\000\004\060\006\001\002\000\004\010\ufff8\001\002" +
    "\000\026\020\042\030\037\054\025\060\046\061\017\062" +
    "\033\063\021\064\027\065\035\066\044\001\002\000\012" +
    "\007\uffcf\021\uffcf\025\uffcf\026\uffcf\001\002\000\026\020" +
    "\042\030\037\054\025\060\046\061\017\062\033\063\021" +
    "\064\027\065\035\066\044\001\002\000\034\021\131\027" +
    "\060\030\054\032\066\033\064\044\065\045\056\046\071" +
    "\047\061\050\057\051\070\052\053\053\072\001\002\000" +
    "\004\040\132\001\002\000\004\022\133\001\002\000\036" +
    "\020\ufffb\023\ufffb\030\ufffb\034\ufffb\037\ufffb\041\ufffb\054" +
    "\ufffb\060\ufffb\061\ufffb\062\ufffb\063\ufffb\064\ufffb\065\ufffb" +
    "\066\ufffb\001\002\000\042\006\uffd4\020\uffd4\023\uffd4\030" +
    "\uffd4\034\uffd4\037\uffd4\041\uffd4\043\135\054\uffd4\060\uffd4" +
    "\061\uffd4\062\uffd4\063\uffd4\064\uffd4\065\uffd4\066\uffd4\001" +
    "\002\000\004\022\133\001\002\000\040\006\uffd5\020\uffd5" +
    "\023\uffd5\030\uffd5\034\uffd5\037\uffd5\041\uffd5\054\uffd5\060" +
    "\uffd5\061\uffd5\062\uffd5\063\uffd5\064\uffd5\065\uffd5\066\uffd5" +
    "\001\002\000\036\020\042\023\uffdb\030\037\034\026\037" +
    "\030\041\023\054\025\060\032\061\017\062\033\063\021" +
    "\064\027\065\035\066\044\001\002\000\004\023\141\001" +
    "\002\000\046\005\uffdd\006\uffdd\017\uffdd\020\uffdd\023\uffdd" +
    "\030\uffdd\034\uffdd\037\uffdd\041\uffdd\043\uffdd\054\uffdd\060" +
    "\uffdd\061\uffdd\062\uffdd\063\uffdd\064\uffdd\065\uffdd\066\uffdd" +
    "\001\002\000\034\007\143\027\060\030\054\032\066\033" +
    "\064\044\065\045\056\046\071\047\061\050\057\051\070" +
    "\052\053\053\072\001\002\000\040\006\uffd2\020\uffd2\023" +
    "\uffd2\030\uffd2\034\uffd2\037\uffd2\041\uffd2\054\uffd2\060\uffd2" +
    "\061\uffd2\062\uffd2\063\uffd2\064\uffd2\065\uffd2\066\uffd2\001" +
    "\002\000\050\007\uffc4\010\uffc4\016\uffc4\021\uffc4\025\uffc4" +
    "\026\uffc4\027\060\030\054\032\066\033\064\044\065\045" +
    "\056\046\071\047\061\050\057\051\070\052\uffc4\053\uffc4" +
    "\056\uffc4\001\002\000\004\002\001\001\002\000\026\020" +
    "\042\030\037\054\025\060\046\061\017\062\033\063\021" +
    "\064\027\065\035\066\044\001\002\000\034\021\150\027" +
    "\060\030\054\032\066\033\064\044\065\045\056\046\071" +
    "\047\061\050\057\051\070\052\053\053\072\001\002\000" +
    "\004\042\151\001\002\000\004\022\133\001\002\000\040" +
    "\006\uffd3\020\uffd3\023\uffd3\030\uffd3\034\uffd3\037\uffd3\041" +
    "\uffd3\054\uffd3\060\uffd3\061\uffd3\062\uffd3\063\uffd3\064\uffd3" +
    "\065\uffd3\066\uffd3\001\002\000\006\006\uffdc\023\uffdc\001" +
    "\002\000\050\016\uffc3\020\112\024\uffd0\025\uffc3\026\uffc3" +
    "\027\uffc3\030\uffc3\032\uffc3\033\uffc3\035\uffd0\044\uffc3\045" +
    "\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3" +
    "\056\155\001\002\000\004\060\156\001\002\000\010\024" +
    "\uffd0\035\uffd0\056\155\001\002\000\004\020\160\001\002" +
    "\000\010\021\166\055\164\060\161\001\002\000\006\010" +
    "\uffe1\016\uffe1\001\002\000\004\010\211\001\002\000\006" +
    "\010\uffe2\016\207\001\002\000\004\060\206\001\002\000" +
    "\004\021\203\001\002\000\006\010\172\022\uffde\001\002" +
    "\000\006\007\170\021\uffe5\001\002\000\006\055\164\060" +
    "\161\001\002\000\004\021\uffe6\001\002\000\014\011\202" +
    "\012\200\013\177\014\175\015\201\001\002\000\004\022" +
    "\133\001\002\000\010\005\uffe7\017\uffe7\060\uffe7\001\002" +
    "\000\010\007\ufff0\021\ufff0\022\ufff0\001\002\000\004\022" +
    "\uffdf\001\002\000\010\007\ufff1\021\ufff1\022\ufff1\001\002" +
    "\000\010\007\ufff2\021\ufff2\022\ufff2\001\002\000\010\007" +
    "\uffef\021\uffef\022\uffef\001\002\000\010\007\ufff3\021\ufff3" +
    "\022\ufff3\001\002\000\006\010\172\022\uffde\001\002\000" +
    "\004\022\133\001\002\000\010\005\uffe8\017\uffe8\060\uffe8" +
    "\001\002\000\006\010\uffe0\016\uffe0\001\002\000\006\055" +
    "\164\060\161\001\002\000\004\010\uffe3\001\002\000\014" +
    "\011\202\012\200\013\177\014\175\015\201\001\002\000" +
    "\006\007\uffe4\021\uffe4\001\002\000\004\005\uffff\001\002" +
    "\000\030\011\202\012\200\013\177\014\175\015\201\061" +
    "\017\062\033\063\021\064\027\065\035\066\044\001\002" +
    "\000\004\007\ufff5\001\002\000\004\007\220\001\002\000" +
    "\004\007\ufff4\001\002\000\044\005\ufffa\006\ufffa\017\ufffa" +
    "\020\ufffa\023\ufffa\030\ufffa\034\ufffa\037\ufffa\041\ufffa\054" +
    "\ufffa\060\ufffa\061\ufffa\062\ufffa\063\ufffa\064\ufffa\065\ufffa" +
    "\066\ufffa\001\002\000\004\060\006\001\002\000\004\002" +
    "\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\220\000\004\032\003\001\001\000\002\001\001\000" +
    "\012\025\012\026\006\027\007\031\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\025\012\026\006\027" +
    "\007\031\212\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\025\012\026\006\027\007\031\013\001\001\000" +
    "\002\001\001\000\004\030\015\001\001\000\026\003\030" +
    "\004\042\005\021\013\037\014\040\015\017\016\035\017" +
    "\023\026\006\027\033\001\001\000\002\001\001\000\022" +
    "\003\030\004\042\005\021\013\037\014\040\015\017\016" +
    "\035\017\152\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\143\004" +
    "\042\005\021\001\001\000\010\003\141\004\042\005\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\006" +
    "\054\007\061\010\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\003\106\004\042\005\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\044\004\042\005" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\006\054\007\061\010\062\001\001\000\002\001\001\000" +
    "\012\003\030\004\042\005\021\013\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\003\074\004\042\005\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\003\073\004\042\005\021" +
    "\001\001\000\010\003\072\004\042\005\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\006\054\007\061\010\062\001\001\000\010" +
    "\006\054\007\061\010\062\001\001\000\010\006\054\007" +
    "\061\010\062\001\001\000\002\001\001\000\012\003\030" +
    "\004\042\005\021\013\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\006" +
    "\054\007\061\010\062\001\001\000\002\001\001\000\010" +
    "\003\121\004\042\005\021\001\001\000\012\003\030\004" +
    "\042\005\021\013\116\001\001\000\006\014\115\026\114" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\006\054\007\061\010\062\001\001\000\004\026" +
    "\123\001\001\000\002\001\001\000\012\003\030\004\042" +
    "\005\021\013\125\001\001\000\002\001\001\000\010\003" +
    "\127\004\042\005\021\001\001\000\010\006\054\007\061" +
    "\010\062\001\001\000\002\001\001\000\004\020\133\001" +
    "\001\000\004\030\136\001\001\000\002\001\001\000\004" +
    "\020\135\001\001\000\002\001\001\000\026\003\030\004" +
    "\042\005\021\013\037\014\040\015\017\016\035\017\137" +
    "\026\006\027\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\006\054\007\061\010\062\001\001\000\002" +
    "\001\001\000\010\006\054\007\061\010\062\001\001\000" +
    "\002\001\001\000\010\003\146\004\042\005\021\001\001" +
    "\000\010\006\054\007\061\010\062\001\001\000\002\001" +
    "\001\000\004\020\151\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\115\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\021\162\022\161" +
    "\023\166\024\164\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\172\001\001\000\002\001\001\000\012\021" +
    "\162\022\161\023\166\024\170\001\001\000\002\001\001" +
    "\000\004\011\175\001\001\000\004\020\173\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\203\001\001\000\004\020\204\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\021\162\022" +
    "\207\001\001\000\002\001\001\000\004\011\211\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\002\215\005" +
    "\216\011\214\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\114\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void syntax_error(Symbol cur_token){
        System.err.println("Syntax error at line: "+ (cur_token.left + 1) + " column " + (cur_token.right + 1));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programma ::= PROGRAM Decls BEGIN VarDecls Statements END 
            {
              ProgramOp RESULT =null;
		int declsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<DeclOp> decls = (ArrayList<DeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int varProgramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varProgramright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<varDeclOp> varProgram = (ArrayList<varDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stateProgramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stateProgramright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<statOp> stateProgram = (ArrayList<statOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 BeginEndOp mainBody = new BeginEndOp(varProgram, stateProgram);
                                                                                            RESULT = new ProgramOp(decls, mainBody); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Programma",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programma EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProgramOp start_val = (ProgramOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Decls ::= VarDecl Decls 
            {
              ArrayList<DeclOp> RESULT =null;
		int varDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		varDeclOp varDecl = (varDeclOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<DeclOp> args = (ArrayList<DeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 args.add(0, varDecl);
                                       RESULT = args; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Decls ::= DefDecl Decls 
            {
              ArrayList<DeclOp> RESULT =null;
		int defDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int defDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefDeclOp defDecl = (DefDeclOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<DeclOp> args = (ArrayList<DeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 args.add(0, defDecl);
                                      RESULT = args; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decls ::= 
            {
              ArrayList<DeclOp> RESULT =null;
		 RESULT = new ArrayList<DeclOp>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VarDecls ::= VarDecls VarDecl 
            {
              ArrayList<varDeclOp> RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<varDeclOp> vars = (ArrayList<varDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		varDeclOp var = (varDeclOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 vars.add(var);
                                         RESULT = vars; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecls",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VarDecls ::= 
            {
              ArrayList<varDeclOp> RESULT =null;
		 RESULT = new ArrayList<varDeclOp>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecls",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VarDecl ::= VarsOptInit COLON TypeOrConstant SEMI 
            {
              varDeclOp RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<varOptInitOp> vars = (ArrayList<varOptInitOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new varDeclOp(vars, type); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VarsOptInit ::= ID PIPE VarsOptInit 
            {
              ArrayList<varOptInitOp> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<varOptInitOp> args = (ArrayList<varOptInitOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		identifierExpression var = new identifierExpression(id, idleft + 1, idright + 1);
                                             varOptInitOp init = new varOptInitOp(var, null);
                                             args.add(0, init);
                                             RESULT = args; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarsOptInit",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VarsOptInit ::= ID ASSIGNDECL Expr PIPE VarsOptInit 
            {
              ArrayList<varOptInitOp> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		expressionNode expr = (expressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int initsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int initsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<varOptInitOp> inits = (ArrayList<varOptInitOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 identifierExpression var = new identifierExpression(id, idleft + 1, idright + 1);
                                                             varOptInitOp init = new varOptInitOp(var, expr);
                                                             inits.add(0, init);
                                                             RESULT = inits; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarsOptInit",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VarsOptInit ::= ID 
            {
              ArrayList<varOptInitOp> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		identifierExpression var = new identifierExpression(id, idleft + 1, idright + 1);
              varOptInitOp init = new varOptInitOp(var, null);
              ArrayList<varOptInitOp> varsInit = new ArrayList<varOptInitOp>();
              varsInit.add(0, init);
              RESULT = varsInit; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarsOptInit",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VarsOptInit ::= ID ASSIGNDECL Expr 
            {
              ArrayList<varOptInitOp> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		expressionNode expr = (expressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 identifierExpression var = new identifierExpression(id, idleft + 1, idright + 1);
                                      varOptInitOp init = new varOptInitOp(var, expr);
	                                  ArrayList<varOptInitOp> varsInit = new ArrayList<varOptInitOp>();
	                                  varsInit.add(0, init);
	                                  RESULT = varsInit; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarsOptInit",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TypeOrConstant ::= Type 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = type; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeOrConstant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TypeOrConstant ::= Constant 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		constantExpression value = (constantExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = value.getConstant(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeOrConstant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Type ::= INT 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "integer"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= BOOL 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "bool"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Type ::= DOUBLE 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "double"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Type ::= STRING 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "string"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Type ::= CHAR 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "char"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Constant ::= TRUE 
            {
              constantExpression RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		boolean value = (boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new constantExpression(value, "true", valueleft+1, valueright+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Constant ::= FALSE 
            {
              constantExpression RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		boolean value = (boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new constantExpression(value, "false", valueleft+1, valueright+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Constant ::= INT_CONST 
            {
              constantExpression RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		int value = (int)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new constantExpression(value,"int_const", valueleft+1, valueright+1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Constant ::= DOUBLE_CONST 
            {
              constantExpression RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double value = (double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new constantExpression(value, "double_const", valueleft+1, valueright+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Constant ::= CHAR_CONST 
            {
              constantExpression RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		char value = (char)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new constantExpression(value, "char_const", valueleft+1, valueright+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Constant ::= STRING_CONST 
            {
              constantExpression RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new constantExpression(value, "string_const", valueleft+1, valueright+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DefDecl ::= DEF ID LPAR ParDecls RPAR OptType Body 
            {
              DefDeclOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<ParDeclOp> params = (ArrayList<ParDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bodyFunleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyFunright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BodyOp bodyFun = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 identifierExpression idFun = new identifierExpression(id, idleft + 1, idright + 1);;
                                                                             RESULT = new DefDeclOp(idFun, params, type, bodyFun); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefDecl",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DefDecl ::= DEF ID LPAR RPAR OptType Body 
            {
              DefDeclOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bodyFunleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyFunright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BodyOp bodyFun = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 identifierExpression idFun = new identifierExpression(id, idleft + 1, idright + 1);
                                                            ArrayList<ParDeclOp> params = new ArrayList<>();
                                                           RESULT = new DefDeclOp(idFun, params, type, bodyFun); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefDecl",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ParDecls ::= ParDecl SEMI ParDecls 
            {
              ArrayList<ParDeclOp> RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParDeclOp par = (ParDeclOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ParDeclOp> params = (ArrayList<ParDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 params.add(0, par);
                                                 RESULT = params; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecls",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ParDecls ::= ParDecl 
            {
              ArrayList<ParDeclOp> RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParDeclOp param = (ParDeclOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList list = new ArrayList<ParDeclOp>();
                            list.add(0, param);
                            RESULT = list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecls",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ParDecl ::= PVars COLON Type 
            {
              ParDeclOp RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<PvarOp> param = (ArrayList<PvarOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParDeclOp(param, type); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecl",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PVars ::= PVar COMMA PVars 
            {
              ArrayList<PvarOp> RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PvarOp var = (PvarOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<PvarOp> vars = (ArrayList<PvarOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 vars.add(0, var);
                                      RESULT = vars; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PVars",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PVars ::= PVar 
            {
              ArrayList<PvarOp> RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PvarOp var = (PvarOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<PvarOp> vars = new ArrayList<PvarOp>();
                   vars.add(0, var);
                   RESULT = vars; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PVars",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PVar ::= ID 
            {
              PvarOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 identifierExpression var = new identifierExpression(id, idleft + 1, idright + 1);
                 RESULT = new PvarOp(var, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PVar",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PVar ::= REF ID 
            {
              PvarOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 identifierExpression var = new identifierExpression(id, idleft + 1, idright + 1);;
                      RESULT = new PvarOp(var, "ref"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PVar",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OptType ::= COLON Type 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = type; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OptType",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OptType ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OptType",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Body ::= LBRAC VarDecls Statements RBRAC 
            {
              BodyOp RESULT =null;
		int dichleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dichright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<varDeclOp> dich = (ArrayList<varDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int statsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<statOp> stats = (ArrayList<statOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new BodyOp(stats, dich); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Statements ::= Stat Statements 
            {
              ArrayList<statOp> RESULT =null;
		int stateleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stateright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		statOp state = (statOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int statsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int statsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<statOp> stats = (ArrayList<statOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 stats.add(0,state);
                                             RESULT = stats; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statements",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Statements ::= 
            {
              ArrayList<statOp> RESULT =null;
		 RESULT = new ArrayList<statOp>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statements",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Stat ::= Vars IN SEMI 
            {
              statOp RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<identifierExpression> ins = (ArrayList<identifierExpression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ReadOp(ins); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Stat ::= Exprs OUT SEMI 
            {
              statOp RESULT =null;
		int outsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int outsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<expressionNode> outs = (ArrayList<expressionNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new WriteOp(outs, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Stat ::= Exprs OUTNL SEMI 
            {
              statOp RESULT =null;
		int outsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int outsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<expressionNode> outs = (ArrayList<expressionNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new WriteOp(outs, "\\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Stat ::= Vars ASSIGN Exprs SEMI 
            {
              statOp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<identifierExpression> var = (ArrayList<identifierExpression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<expressionNode> expr = (ArrayList<expressionNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AssignOp(var, expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Stat ::= FunCallStat SEMI 
            {
              statOp RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		statOp node = (statOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = node; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Stat ::= IF LPAR Expr RPAR THEN Body ELSE Body 
            {
              statOp RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		expressionNode cond = (expressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int btrueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int btrueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		BodyOp btrue = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bfalseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bfalseright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BodyOp bfalse = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ifThenElse(cond, btrue, bfalse); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Stat ::= IF LPAR Expr RPAR THEN Body 
            {
              statOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		expressionNode expr = (expressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ifThenOp(expr,body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Stat ::= WHILE LPAR Expr RPAR DO Body 
            {
              statOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		expressionNode expr = (expressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new whileOp(expr, body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Stat ::= RETURN Expr SEMI 
            {
              statOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		expressionNode expr = (expressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new returnOp(expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Vars ::= ID PIPE Vars 
            {
              ArrayList<identifierExpression> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<identifierExpression> args = (ArrayList<identifierExpression>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 identifierExpression var = new identifierExpression(id, idleft + 1, idright + 1);;
                                 args.add(0, var);
                                 RESULT = args; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Vars",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Vars ::= ID 
            {
              ArrayList<identifierExpression> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<identifierExpression> list = new ArrayList<identifierExpression>();
                   identifierExpression var = new identifierExpression(id, idleft + 1, idright + 1);
                   list.add(0, var);
                   RESULT = list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Vars",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Exprs ::= Expr COMMA Exprs 
            {
              ArrayList<expressionNode> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		expressionNode expr = (expressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<expressionNode> args = (ArrayList<expressionNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 args.add(0, expr);
                                          RESULT = args; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exprs",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Exprs ::= Expr 
            {
              ArrayList<expressionNode> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		expressionNode expr = (expressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<expressionNode> list = new ArrayList<expressionNode>();
	               list.add(0, expr);
	                RESULT = list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exprs",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FunCallExpr ::= ID LPAR Exprs RPAR 
            {
              expressionNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<expressionNode> args = (ArrayList<expressionNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 identifierExpression idFun = new identifierExpression(id, idleft +1, idright + 1);
                                          RESULT = new CallOp(idFun,args, idleft + 1, idright + 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCallExpr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FunCallExpr ::= ID LPAR RPAR 
            {
              expressionNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ArrayList<expressionNode> args = new ArrayList<>();
                            RESULT = new CallOp(new identifierExpression(id, idleft + 1, idright + 1), args, idleft + 1, idright +1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCallExpr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FunCallStat ::= ID LPAR Exprs RPAR 
            {
              statOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<expressionNode> args = (ArrayList<expressionNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 identifierExpression idFun = new identifierExpression(id, idleft + 1, idright + 1);
                                          RESULT = new FunCallStat(idFun,args); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCallStat",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FunCallStat ::= ID LPAR RPAR 
            {
              statOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 ArrayList<expressionNode> args = new ArrayList<>();
        RESULT = new FunCallStat(new identifierExpression(id, idleft + 1, idright + 1)
        , args); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCallStat",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expr ::= Expr ArithOp Expr 
            {
              expressionNode RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		expressionNode op1 = (expressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String operator = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		expressionNode op2 = (expressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new binaryExpression(operator, op1, op2, op1.getLine(), op1.getColumn()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expr ::= Expr BoolOp Expr 
            {
              expressionNode RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		expressionNode op1 = (expressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String operator = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		expressionNode op2 = (expressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new binaryExpression(operator, op1, op2, op1.getLine(), op1.getColumn()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expr ::= Expr RelOp Expr 
            {
              expressionNode RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		expressionNode op1 = (expressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String operator = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		expressionNode op2 = (expressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new binaryExpression(operator, op1, op2, op1.getLine(), op1.getColumn()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expr ::= LPAR Expr RPAR 
            {
              expressionNode RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		expressionNode node = (expressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = node; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expr ::= MINUS Expr 
            {
              expressionNode RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		expressionNode node = (expressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new unaryExpression("-", node, node.getLine(), node.getColumn()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expr ::= NOT Expr 
            {
              expressionNode RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		expressionNode node = (expressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new unaryExpression("not", node, node.getLine(), node.getColumn()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expr ::= ID 
            {
              expressionNode RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new identifierExpression(value, valueleft + 1, valueright + 1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expr ::= FunCallExpr 
            {
              expressionNode RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		expressionNode node = (expressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = node; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expr ::= Constant 
            {
              expressionNode RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		constantExpression node = (constantExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = node; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ArithOp ::= PLUS 
            {
              String RESULT =null;
		 RESULT = "+" ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArithOp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ArithOp ::= MINUS 
            {
              String RESULT =null;
		 RESULT = "-"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArithOp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ArithOp ::= TIMES 
            {
              String RESULT =null;
		 RESULT = "*"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArithOp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ArithOp ::= DIV 
            {
              String RESULT =null;
		 RESULT = "/"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArithOp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // BoolOp ::= AND 
            {
              String RESULT =null;
		 RESULT = "and"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BoolOp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // BoolOp ::= OR 
            {
              String RESULT =null;
		 RESULT = "or"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BoolOp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // RelOp ::= GT 
            {
              String RESULT =null;
		 RESULT = ">"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // RelOp ::= GE 
            {
              String RESULT =null;
		 RESULT = ">="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // RelOp ::= LT 
            {
              String RESULT =null;
		 RESULT = "<"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // RelOp ::= LE 
            {
              String RESULT =null;
		 RESULT = "<="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // RelOp ::= EQ 
            {
              String RESULT =null;
		 RESULT = "=="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // RelOp ::= NE 
            {
              String RESULT =null;
		 RESULT ="<>"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}

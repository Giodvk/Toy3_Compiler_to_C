
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package esercitazione4;

import java_cup.runtime.*;
import classNode.Expression.*;
import classNode.DeclarationNode.*;
import classNode.jumpStatement.*;
import classNode.main.*;
import classNode.Stat.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\122\000\002\035\010\000\002\002\004\000\002\034" +
    "\004\000\002\034\004\000\002\034\002\000\002\033\004" +
    "\000\002\033\002\000\002\032\006\000\002\031\005\000" +
    "\002\031\007\000\002\031\003\000\002\031\005\000\002" +
    "\002\003\000\002\002\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\030\011\000\002\030\010\000\002\027\005\000\002\027" +
    "\003\000\002\026\005\000\002\025\005\000\002\025\003" +
    "\000\002\024\003\000\002\024\004\000\002\015\004\000" +
    "\002\015\002\000\002\023\006\000\002\005\003\000\002" +
    "\004\004\000\002\004\005\000\002\003\007\000\002\022" +
    "\004\000\002\022\002\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\006\000\002\020\004\000" +
    "\002\020\012\000\002\020\010\000\002\020\010\000\002" +
    "\020\005\000\002\020\012\000\002\017\005\000\002\017" +
    "\003\000\002\016\005\000\002\016\003\000\002\007\006" +
    "\000\002\007\005\000\002\021\006\000\002\021\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\004\000\002\006\004\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\012\003\000\002\012\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\242\000\004\004\005\001\002\000\004\002\244\001" +
    "\002\000\010\005\ufffd\017\011\062\006\001\002\000\010" +
    "\010\ufff7\036\112\056\243\001\002\000\004\010\236\001" +
    "\002\000\010\005\ufffd\017\011\062\006\001\002\000\004" +
    "\062\201\001\002\000\004\005\015\001\002\000\010\005" +
    "\ufffd\017\011\062\006\001\002\000\004\005\ufffe\001\002" +
    "\000\040\006\ufffb\020\ufffb\030\ufffb\034\ufffb\037\ufffb\041" +
    "\ufffb\054\ufffb\060\ufffb\062\ufffb\063\ufffb\064\ufffb\065\ufffb" +
    "\066\ufffb\067\ufffb\070\ufffb\001\002\000\040\006\uffd7\020" +
    "\043\030\040\034\026\037\031\041\023\054\025\060\027" +
    "\062\033\063\017\064\034\065\021\066\030\067\036\070" +
    "\045\001\002\000\050\007\uffe9\010\uffe9\016\uffe9\021\uffe9" +
    "\025\uffe9\026\uffe9\027\uffe9\030\uffe9\032\uffe9\033\uffe9\044" +
    "\uffe9\045\uffe9\046\uffe9\047\uffe9\050\uffe9\051\uffe9\052\uffe9" +
    "\053\uffe9\056\uffe9\001\002\000\044\006\uffd7\020\043\023" +
    "\uffd7\030\040\034\026\037\031\041\023\054\025\060\027" +
    "\061\uffd7\062\160\063\017\064\034\065\021\066\030\067" +
    "\036\070\045\001\002\000\050\007\uffeb\010\uffeb\016\uffeb" +
    "\021\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\032\uffeb\033" +
    "\uffeb\044\uffeb\045\uffeb\046\uffeb\047\uffeb\050\uffeb\051\uffeb" +
    "\052\uffeb\053\uffeb\056\uffeb\001\002\000\050\007\uffbc\010" +
    "\uffbc\016\uffbc\021\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc" +
    "\032\uffbc\033\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050" +
    "\uffbc\051\uffbc\052\uffbc\053\uffbc\056\uffbc\001\002\000\004" +
    "\020\173\001\002\000\004\006\172\001\002\000\026\020" +
    "\043\030\040\054\025\062\047\063\017\064\034\065\021" +
    "\066\030\067\036\070\045\001\002\000\026\020\043\030" +
    "\040\054\025\062\047\063\017\064\034\065\021\066\030" +
    "\067\036\070\045\001\002\000\004\020\143\001\002\000" +
    "\050\007\uffee\010\uffee\016\uffee\021\uffee\025\uffee\026\uffee" +
    "\027\uffee\030\uffee\032\uffee\033\uffee\044\uffee\045\uffee\046" +
    "\uffee\047\uffee\050\uffee\051\uffee\052\uffee\053\uffee\056\uffee" +
    "\001\002\000\004\020\130\001\002\000\044\007\uffc9\016" +
    "\126\021\uffc9\025\uffc9\026\uffc9\027\060\030\054\032\067" +
    "\033\064\044\065\045\057\046\072\047\062\050\061\051" +
    "\071\052\055\053\073\001\002\000\054\010\ufff7\016\uffbe" +
    "\020\113\024\uffcb\025\uffbe\026\uffbe\027\uffbe\030\uffbe\032" +
    "\uffbe\033\uffbe\035\uffcb\036\112\044\uffbe\045\uffbe\046\uffbe" +
    "\047\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe\056\114\001" +
    "\002\000\050\007\uffec\010\uffec\016\uffec\021\uffec\025\uffec" +
    "\026\uffec\027\uffec\030\uffec\032\uffec\033\uffec\044\uffec\045" +
    "\uffec\046\uffec\047\uffec\050\uffec\051\uffec\052\uffec\053\uffec" +
    "\056\uffec\001\002\000\042\006\ufffc\020\ufffc\023\ufffc\030" +
    "\ufffc\034\ufffc\037\ufffc\041\ufffc\054\ufffc\060\ufffc\062\ufffc" +
    "\063\ufffc\064\ufffc\065\ufffc\066\ufffc\067\ufffc\070\ufffc\001" +
    "\002\000\050\007\uffed\010\uffed\016\uffed\021\uffed\025\uffed" +
    "\026\uffed\027\uffed\030\uffed\032\uffed\033\uffed\044\uffed\045" +
    "\uffed\046\uffed\047\uffed\050\uffed\051\uffed\052\uffed\053\uffed" +
    "\056\uffed\001\002\000\004\007\111\001\002\000\026\020" +
    "\043\030\040\054\025\062\047\063\017\064\034\065\021" +
    "\066\030\067\036\070\045\001\002\000\006\025\104\026" +
    "\105\001\002\000\006\024\077\035\100\001\002\000\026" +
    "\020\043\030\040\054\025\062\047\063\017\064\034\065" +
    "\021\066\030\067\036\070\045\001\002\000\050\007\uffbd" +
    "\010\uffbd\016\uffbd\021\uffbd\025\uffbd\026\uffbd\027\uffbd\030" +
    "\uffbd\032\uffbd\033\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd" +
    "\050\uffbd\051\uffbd\052\uffbd\053\uffbd\056\uffbd\001\002\000" +
    "\050\007\uffea\010\uffea\016\uffea\021\uffea\025\uffea\026\uffea" +
    "\027\uffea\030\uffea\032\uffea\033\uffea\044\uffea\045\uffea\046" +
    "\uffea\047\uffea\050\uffea\051\uffea\052\uffea\053\uffea\056\uffea" +
    "\001\002\000\034\021\070\027\060\030\054\032\067\033" +
    "\064\044\065\045\057\046\072\047\062\050\061\051\071" +
    "\052\055\053\073\001\002\000\052\007\uffbe\010\uffbe\016" +
    "\uffbe\020\050\021\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe" +
    "\032\uffbe\033\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\050" +
    "\uffbe\051\uffbe\052\uffbe\053\uffbe\056\uffbe\001\002\000\030" +
    "\020\043\021\052\030\040\054\025\062\047\063\017\064" +
    "\034\065\021\066\030\067\036\070\045\001\002\000\004" +
    "\021\053\001\002\000\050\007\uffc7\010\uffc7\016\uffc7\021" +
    "\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\032\uffc7\033\uffc7" +
    "\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7\052" +
    "\uffc7\053\uffc7\056\uffc7\001\002\000\050\007\uffc8\010\uffc8" +
    "\016\uffc8\021\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\032" +
    "\uffc8\033\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8" +
    "\051\uffc8\052\uffc8\053\uffc8\056\uffc8\001\002\000\026\020" +
    "\uffba\030\uffba\054\uffba\062\uffba\063\uffba\064\uffba\065\uffba" +
    "\066\uffba\067\uffba\070\uffba\001\002\000\026\020\uffb7\030" +
    "\uffb7\054\uffb7\062\uffb7\063\uffb7\064\uffb7\065\uffb7\066\uffb7" +
    "\067\uffb7\070\uffb7\001\002\000\026\020\043\030\040\054" +
    "\025\062\047\063\017\064\034\065\021\066\030\067\036" +
    "\070\045\001\002\000\026\020\uffb4\030\uffb4\054\uffb4\062" +
    "\uffb4\063\uffb4\064\uffb4\065\uffb4\066\uffb4\067\uffb4\070\uffb4" +
    "\001\002\000\026\020\uffbb\030\uffbb\054\uffbb\062\uffbb\063" +
    "\uffbb\064\uffbb\065\uffbb\066\uffbb\067\uffbb\070\uffbb\001\002" +
    "\000\026\020\uffb1\030\uffb1\054\uffb1\062\uffb1\063\uffb1\064" +
    "\uffb1\065\uffb1\066\uffb1\067\uffb1\070\uffb1\001\002\000\026" +
    "\020\uffb2\030\uffb2\054\uffb2\062\uffb2\063\uffb2\064\uffb2\065" +
    "\uffb2\066\uffb2\067\uffb2\070\uffb2\001\002\000\026\020\043" +
    "\030\040\054\025\062\047\063\017\064\034\065\021\066" +
    "\030\067\036\070\045\001\002\000\026\020\uffb8\030\uffb8" +
    "\054\uffb8\062\uffb8\063\uffb8\064\uffb8\065\uffb8\066\uffb8\067" +
    "\uffb8\070\uffb8\001\002\000\026\020\uffb5\030\uffb5\054\uffb5" +
    "\062\uffb5\063\uffb5\064\uffb5\065\uffb5\066\uffb5\067\uffb5\070" +
    "\uffb5\001\002\000\026\020\043\030\040\054\025\062\047" +
    "\063\017\064\034\065\021\066\030\067\036\070\045\001" +
    "\002\000\026\020\uffb9\030\uffb9\054\uffb9\062\uffb9\063\uffb9" +
    "\064\uffb9\065\uffb9\066\uffb9\067\uffb9\070\uffb9\001\002\000" +
    "\050\007\uffc1\010\uffc1\016\uffc1\021\uffc1\025\uffc1\026\uffc1" +
    "\027\uffc1\030\uffc1\032\uffc1\033\uffc1\044\uffc1\045\uffc1\046" +
    "\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1\056\uffc1" +
    "\001\002\000\026\020\uffb0\030\uffb0\054\uffb0\062\uffb0\063" +
    "\uffb0\064\uffb0\065\uffb0\066\uffb0\067\uffb0\070\uffb0\001\002" +
    "\000\026\020\uffb3\030\uffb3\054\uffb3\062\uffb3\063\uffb3\064" +
    "\uffb3\065\uffb3\066\uffb3\067\uffb3\070\uffb3\001\002\000\026" +
    "\020\uffb6\030\uffb6\054\uffb6\062\uffb6\063\uffb6\064\uffb6\065" +
    "\uffb6\066\uffb6\067\uffb6\070\uffb6\001\002\000\050\007\uffc2" +
    "\010\uffc2\016\uffc2\021\uffc2\025\uffc2\026\uffc2\027\060\030" +
    "\054\032\067\033\064\044\065\045\057\046\072\047\062" +
    "\050\061\051\071\052\uffc2\053\uffc2\056\uffc2\001\002\000" +
    "\050\007\uffc3\010\uffc3\016\uffc3\021\uffc3\025\uffc3\026\uffc3" +
    "\027\060\030\054\032\067\033\064\044\065\045\057\046" +
    "\072\047\062\050\061\051\071\052\055\053\073\056\uffc3" +
    "\001\002\000\050\007\uffc4\010\uffc4\016\uffc4\021\uffc4\025" +
    "\uffc4\026\uffc4\027\060\030\054\032\067\033\064\044\065" +
    "\045\057\046\072\047\062\050\061\051\071\052\055\053" +
    "\073\056\uffc4\001\002\000\004\007\103\001\002\000\026" +
    "\020\043\030\040\054\025\062\047\063\017\064\034\065" +
    "\021\066\030\067\036\070\045\001\002\000\004\007\102" +
    "\001\002\000\044\006\uffd3\020\uffd3\023\uffd3\030\uffd3\034" +
    "\uffd3\037\uffd3\041\uffd3\054\uffd3\060\uffd3\061\uffd3\062\uffd3" +
    "\063\uffd3\064\uffd3\065\uffd3\066\uffd3\067\uffd3\070\uffd3\001" +
    "\002\000\044\006\uffd6\020\uffd6\023\uffd6\030\uffd6\034\uffd6" +
    "\037\uffd6\041\uffd6\054\uffd6\060\uffd6\061\uffd6\062\uffd6\063" +
    "\uffd6\064\uffd6\065\uffd6\066\uffd6\067\uffd6\070\uffd6\001\002" +
    "\000\004\007\107\001\002\000\004\007\106\001\002\000" +
    "\044\006\uffd4\020\uffd4\023\uffd4\030\uffd4\034\uffd4\037\uffd4" +
    "\041\uffd4\054\uffd4\060\uffd4\061\uffd4\062\uffd4\063\uffd4\064" +
    "\uffd4\065\uffd4\066\uffd4\067\uffd4\070\uffd4\001\002\000\044" +
    "\006\uffd5\020\uffd5\023\uffd5\030\uffd5\034\uffd5\037\uffd5\041" +
    "\uffd5\054\uffd5\060\uffd5\061\uffd5\062\uffd5\063\uffd5\064\uffd5" +
    "\065\uffd5\066\uffd5\067\uffd5\070\uffd5\001\002\000\050\007" +
    "\uffc0\010\uffc0\016\uffc0\021\uffc0\025\uffc0\026\uffc0\027\uffc0" +
    "\030\uffc0\032\uffc0\033\uffc0\044\uffc0\045\uffc0\046\uffc0\047" +
    "\uffc0\050\uffc0\051\uffc0\052\uffc0\053\uffc0\056\uffc0\001\002" +
    "\000\044\006\uffd2\020\uffd2\023\uffd2\030\uffd2\034\uffd2\037" +
    "\uffd2\041\uffd2\054\uffd2\060\uffd2\061\uffd2\062\uffd2\063\uffd2" +
    "\064\uffd2\065\uffd2\066\uffd2\067\uffd2\070\uffd2\001\002\000" +
    "\026\020\043\030\040\054\025\062\047\063\017\064\034" +
    "\065\021\066\030\067\036\070\045\001\002\000\030\020" +
    "\043\021\121\030\040\054\025\062\047\063\017\064\034" +
    "\065\021\066\030\067\036\070\045\001\002\000\004\062" +
    "\115\001\002\000\014\010\ufff7\024\uffcb\035\uffcb\036\112" +
    "\056\114\001\002\000\004\010\ufff9\001\002\000\006\024" +
    "\uffcc\035\uffcc\001\002\000\004\021\122\001\002\000\042" +
    "\007\uffc5\016\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\032" +
    "\uffc7\033\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7" +
    "\051\uffc7\052\uffc7\053\uffc7\001\002\000\042\007\uffc6\016" +
    "\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\032\uffc8\033\uffc8" +
    "\044\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052" +
    "\uffc8\053\uffc8\001\002\000\036\010\ufff6\027\060\030\054" +
    "\032\067\033\064\044\065\045\057\046\072\047\062\050" +
    "\061\051\071\052\055\053\073\056\124\001\002\000\004" +
    "\062\006\001\002\000\004\010\ufff8\001\002\000\026\020" +
    "\043\030\040\054\025\062\047\063\017\064\034\065\021" +
    "\066\030\067\036\070\045\001\002\000\012\007\uffca\021" +
    "\uffca\025\uffca\026\uffca\001\002\000\026\020\043\030\040" +
    "\054\025\062\047\063\017\064\034\065\021\066\030\067" +
    "\036\070\045\001\002\000\034\021\132\027\060\030\054" +
    "\032\067\033\064\044\065\045\057\046\072\047\062\050" +
    "\061\051\071\052\055\053\073\001\002\000\004\040\133" +
    "\001\002\000\004\022\134\001\002\000\040\020\ufffb\023" +
    "\ufffb\030\ufffb\034\ufffb\037\ufffb\041\ufffb\054\ufffb\060\ufffb" +
    "\062\ufffb\063\ufffb\064\ufffb\065\ufffb\066\ufffb\067\ufffb\070" +
    "\ufffb\001\002\000\046\006\uffd0\020\uffd0\023\uffd0\030\uffd0" +
    "\034\uffd0\037\uffd0\041\uffd0\043\136\054\uffd0\060\uffd0\061" +
    "\uffd0\062\uffd0\063\uffd0\064\uffd0\065\uffd0\066\uffd0\067\uffd0" +
    "\070\uffd0\001\002\000\004\022\134\001\002\000\044\006" +
    "\uffd1\020\uffd1\023\uffd1\030\uffd1\034\uffd1\037\uffd1\041\uffd1" +
    "\054\uffd1\060\uffd1\061\uffd1\062\uffd1\063\uffd1\064\uffd1\065" +
    "\uffd1\066\uffd1\067\uffd1\070\uffd1\001\002\000\040\020\043" +
    "\023\uffd7\030\040\034\026\037\031\041\023\054\025\060" +
    "\027\062\033\063\017\064\034\065\021\066\030\067\036" +
    "\070\045\001\002\000\004\023\142\001\002\000\052\005" +
    "\uffdd\006\uffdd\017\uffdd\020\uffdd\023\uffdd\030\uffdd\034\uffdd" +
    "\037\uffdd\041\uffdd\043\uffdd\054\uffdd\060\uffdd\061\uffdd\062" +
    "\uffdd\063\uffdd\064\uffdd\065\uffdd\066\uffdd\067\uffdd\070\uffdd" +
    "\001\002\000\004\062\144\001\002\000\004\021\145\001" +
    "\002\000\016\063\017\064\034\065\021\066\030\067\036" +
    "\070\045\001\002\000\016\063\017\064\034\065\021\066" +
    "\030\067\036\070\045\001\002\000\004\010\156\001\002" +
    "\000\004\006\153\001\002\000\020\006\uffdc\063\017\064" +
    "\034\065\021\066\030\067\036\070\045\001\002\000\020" +
    "\006\uffdb\063\uffdb\064\uffdb\065\uffdb\066\uffdb\067\uffdb\070" +
    "\uffdb\001\002\000\004\060\154\001\002\000\004\007\155" +
    "\001\002\000\044\006\uffcd\020\uffcd\023\uffcd\030\uffcd\034" +
    "\uffcd\037\uffcd\041\uffcd\054\uffcd\060\uffcd\061\uffcd\062\uffcd" +
    "\063\uffcd\064\uffcd\065\uffcd\066\uffcd\067\uffcd\070\uffcd\001" +
    "\002\000\040\020\043\030\040\034\026\037\031\041\023" +
    "\054\025\060\027\061\uffd7\062\160\063\017\064\034\065" +
    "\021\066\030\067\036\070\045\001\002\000\004\061\163" +
    "\001\002\000\050\016\uffbe\020\113\024\uffcb\025\uffbe\026" +
    "\uffbe\027\uffbe\030\uffbe\032\uffbe\033\uffbe\035\uffcb\044\uffbe" +
    "\045\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe\053" +
    "\uffbe\056\161\001\002\000\004\062\162\001\002\000\010" +
    "\024\uffcb\035\uffcb\056\161\001\002\000\004\007\164\001" +
    "\002\000\020\006\uffd9\063\uffd9\064\uffd9\065\uffd9\066\uffd9" +
    "\067\uffd9\070\uffd9\001\002\000\016\063\017\064\034\065" +
    "\021\066\030\067\036\070\045\001\002\000\020\006\uffda" +
    "\063\uffda\064\uffda\065\uffda\066\uffda\067\uffda\070\uffda\001" +
    "\002\000\034\007\170\027\060\030\054\032\067\033\064" +
    "\044\065\045\057\046\072\047\062\050\061\051\071\052" +
    "\055\053\073\001\002\000\044\006\uffce\020\uffce\023\uffce" +
    "\030\uffce\034\uffce\037\uffce\041\uffce\054\uffce\060\uffce\061" +
    "\uffce\062\uffce\063\uffce\064\uffce\065\uffce\066\uffce\067\uffce" +
    "\070\uffce\001\002\000\050\007\uffbf\010\uffbf\016\uffbf\021" +
    "\uffbf\025\uffbf\026\uffbf\027\060\030\054\032\067\033\064" +
    "\044\065\045\057\046\072\047\062\050\061\051\071\052" +
    "\uffbf\053\uffbf\056\uffbf\001\002\000\004\002\001\001\002" +
    "\000\026\020\043\030\040\054\025\062\047\063\017\064" +
    "\034\065\021\066\030\067\036\070\045\001\002\000\034" +
    "\021\175\027\060\030\054\032\067\033\064\044\065\045" +
    "\057\046\072\047\062\050\061\051\071\052\055\053\073" +
    "\001\002\000\004\042\176\001\002\000\004\022\134\001" +
    "\002\000\044\006\uffcf\020\uffcf\023\uffcf\030\uffcf\034\uffcf" +
    "\037\uffcf\041\uffcf\054\uffcf\060\uffcf\061\uffcf\062\uffcf\063" +
    "\uffcf\064\uffcf\065\uffcf\066\uffcf\067\uffcf\070\uffcf\001\002" +
    "\000\010\006\uffd8\023\uffd8\061\uffd8\001\002\000\004\020" +
    "\202\001\002\000\010\021\210\055\206\062\203\001\002" +
    "\000\006\010\uffe1\016\uffe1\001\002\000\004\010\233\001" +
    "\002\000\006\010\uffe2\016\231\001\002\000\004\062\230" +
    "\001\002\000\004\021\225\001\002\000\006\010\214\022" +
    "\uffde\001\002\000\006\007\212\021\uffe5\001\002\000\006" +
    "\055\206\062\203\001\002\000\004\021\uffe6\001\002\000" +
    "\014\011\224\012\222\013\221\014\217\015\223\001\002" +
    "\000\004\022\134\001\002\000\010\005\uffe7\017\uffe7\062" +
    "\uffe7\001\002\000\010\007\ufff0\021\ufff0\022\ufff0\001\002" +
    "\000\004\022\uffdf\001\002\000\010\007\ufff1\021\ufff1\022" +
    "\ufff1\001\002\000\010\007\ufff2\021\ufff2\022\ufff2\001\002" +
    "\000\010\007\uffef\021\uffef\022\uffef\001\002\000\010\007" +
    "\ufff3\021\ufff3\022\ufff3\001\002\000\006\010\214\022\uffde" +
    "\001\002\000\004\022\134\001\002\000\010\005\uffe8\017" +
    "\uffe8\062\uffe8\001\002\000\006\010\uffe0\016\uffe0\001\002" +
    "\000\006\055\206\062\203\001\002\000\004\010\uffe3\001" +
    "\002\000\014\011\224\012\222\013\221\014\217\015\223" +
    "\001\002\000\006\007\uffe4\021\uffe4\001\002\000\004\005" +
    "\uffff\001\002\000\030\011\224\012\222\013\221\014\217" +
    "\015\223\063\017\064\034\065\021\066\030\067\036\070" +
    "\045\001\002\000\004\007\ufff5\001\002\000\004\007\242" +
    "\001\002\000\004\007\ufff4\001\002\000\046\005\ufffa\006" +
    "\ufffa\017\ufffa\020\ufffa\023\ufffa\030\ufffa\034\ufffa\037\ufffa" +
    "\041\ufffa\054\ufffa\060\ufffa\062\ufffa\063\ufffa\064\ufffa\065" +
    "\ufffa\066\ufffa\067\ufffa\070\ufffa\001\002\000\004\062\006" +
    "\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\242\000\004\035\003\001\001\000\002\001\001\000" +
    "\012\030\012\031\006\032\007\034\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\030\012\031\006\032" +
    "\007\034\234\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\030\012\031\006\032\007\034\013\001\001\000" +
    "\002\001\001\000\004\033\015\001\001\000\026\006\031" +
    "\007\043\010\021\016\040\017\041\020\017\021\036\022" +
    "\023\031\006\032\034\001\001\000\002\001\001\000\022" +
    "\006\031\007\043\010\021\016\040\017\041\020\017\021" +
    "\036\022\177\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\006\170\007" +
    "\043\010\021\001\001\000\010\006\166\007\043\010\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\011\055\012\062\013\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\006\107\007\043\010\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\006" +
    "\045\007\043\010\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\011\055\012\062\013\065\001\001\000" +
    "\002\001\001\000\012\006\031\007\043\010\021\016\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\006\075" +
    "\007\043\010\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\006\074" +
    "\007\043\010\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\006\073\007\043\010\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\011\055\012\062\013\065" +
    "\001\001\000\010\011\055\012\062\013\065\001\001\000" +
    "\010\011\055\012\062\013\065\001\001\000\002\001\001" +
    "\000\012\006\031\007\043\010\021\016\100\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\011\055\012\062\013\065\001\001\000\002" +
    "\001\001\000\010\006\122\007\043\010\021\001\001\000" +
    "\012\006\031\007\043\010\021\016\117\001\001\000\006" +
    "\017\116\031\115\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\011\055\012\062\013\065\001" +
    "\001\000\004\031\124\001\001\000\002\001\001\000\012" +
    "\006\031\007\043\010\021\016\126\001\001\000\002\001" +
    "\001\000\010\006\130\007\043\010\021\001\001\000\010" +
    "\011\055\012\062\013\065\001\001\000\002\001\001\000" +
    "\004\023\134\001\001\000\004\033\137\001\001\000\002" +
    "\001\001\000\004\023\136\001\001\000\002\001\001\000" +
    "\026\006\031\007\043\010\021\016\040\017\041\020\017" +
    "\021\036\022\140\031\006\032\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\003\145\004\150\005\147\010\146\001\001\000" +
    "\006\003\164\010\146\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\151\010\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\006\031\007\043\010\021\016\040\017\041\020" +
    "\017\021\036\022\156\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\165\010\146" +
    "\001\001\000\002\001\001\000\010\011\055\012\062\013" +
    "\065\001\001\000\002\001\001\000\010\011\055\012\062" +
    "\013\065\001\001\000\002\001\001\000\010\006\173\007" +
    "\043\010\021\001\001\000\010\011\055\012\062\013\065" +
    "\001\001\000\002\001\001\000\004\023\176\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\024\204\025\203\026\210\027\206\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\214\001\001\000\002\001" +
    "\001\000\012\024\204\025\203\026\210\027\212\001\001" +
    "\000\002\001\001\000\004\014\217\001\001\000\004\023" +
    "\215\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\225\001\001\000\004" +
    "\023\226\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\024\204\025\231\001\001\000\002\001\001\000\004" +
    "\014\233\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\002\237\010\240\014\236\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\115\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void syntax_error(Symbol cur_token){
        System.err.println("Syntax error at line: "+ (cur_token.left + 1) + " column " + (cur_token.right + 1));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programma ::= PROGRAM Decls BEGIN VarDecls Statements END 
            {
              ProgramOp RESULT =null;
		int declsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<DeclOp> decls = (ArrayList<DeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int varProgramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varProgramright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<varDeclOp> varProgram = (ArrayList<varDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stateProgramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stateProgramright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<statOp> stateProgram = (ArrayList<statOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 BeginEndOp mainBody = new BeginEndOp(varProgram, stateProgram);
                                                                                            RESULT = new ProgramOp(decls, mainBody); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Programma",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programma EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProgramOp start_val = (ProgramOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Decls ::= VarDecl Decls 
            {
              ArrayList<DeclOp> RESULT =null;
		int varDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		varDeclOp varDecl = (varDeclOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<DeclOp> args = (ArrayList<DeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 args.add(0, varDecl);
                                       RESULT = args; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Decls ::= DefDecl Decls 
            {
              ArrayList<DeclOp> RESULT =null;
		int defDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int defDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefDeclOp defDecl = (DefDeclOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<DeclOp> args = (ArrayList<DeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 args.add(0, defDecl);
                                      RESULT = args; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decls ::= 
            {
              ArrayList<DeclOp> RESULT =null;
		 RESULT = new ArrayList<DeclOp>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VarDecls ::= VarDecls VarDecl 
            {
              ArrayList<varDeclOp> RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<varDeclOp> vars = (ArrayList<varDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		varDeclOp var = (varDeclOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 vars.add(var);
                                         RESULT = vars; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecls",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VarDecls ::= 
            {
              ArrayList<varDeclOp> RESULT =null;
		 RESULT = new ArrayList<varDeclOp>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecls",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VarDecl ::= VarsOptInit COLON TypeOrConstant SEMI 
            {
              varDeclOp RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<varOptInitOp> vars = (ArrayList<varOptInitOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new varDeclOp(vars, type); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VarsOptInit ::= ID PIPE VarsOptInit 
            {
              ArrayList<varOptInitOp> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<varOptInitOp> args = (ArrayList<varOptInitOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		identifierExpression var = new identifierExpression(id, idleft + 1, idright + 1);
                                             varOptInitOp init = new varOptInitOp(var, null);
                                             args.add(0, init);
                                             RESULT = args; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarsOptInit",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VarsOptInit ::= ID ASSIGNDECL Expr PIPE VarsOptInit 
            {
              ArrayList<varOptInitOp> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		expressionNode expr = (expressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int initsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int initsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<varOptInitOp> inits = (ArrayList<varOptInitOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 identifierExpression var = new identifierExpression(id, idleft + 1, idright + 1);
                                                             varOptInitOp init = new varOptInitOp(var, expr);
                                                             inits.add(0, init);
                                                             RESULT = inits; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarsOptInit",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VarsOptInit ::= ID 
            {
              ArrayList<varOptInitOp> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		identifierExpression var = new identifierExpression(id, idleft + 1, idright + 1);
              varOptInitOp init = new varOptInitOp(var, null);
              ArrayList<varOptInitOp> varsInit = new ArrayList<varOptInitOp>();
              varsInit.add(0, init);
              RESULT = varsInit; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarsOptInit",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VarsOptInit ::= ID ASSIGNDECL Expr 
            {
              ArrayList<varOptInitOp> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		expressionNode expr = (expressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 identifierExpression var = new identifierExpression(id, idleft + 1, idright + 1);
                                      varOptInitOp init = new varOptInitOp(var, expr);
	                                  ArrayList<varOptInitOp> varsInit = new ArrayList<varOptInitOp>();
	                                  varsInit.add(0, init);
	                                  RESULT = varsInit; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarsOptInit",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TypeOrConstant ::= Type 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = type; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeOrConstant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TypeOrConstant ::= Constant 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		constantExpression value = (constantExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = value.getConstant(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeOrConstant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Type ::= INT 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "integer"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= BOOL 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "bool"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Type ::= DOUBLE 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "double"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Type ::= STRING 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "string"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Type ::= CHAR 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "char"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Constant ::= TRUE 
            {
              constantExpression RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		boolean value = (boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new constantExpression(value, "true", valueleft+1, valueright+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Constant ::= FALSE 
            {
              constantExpression RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		boolean value = (boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new constantExpression(value, "false", valueleft+1, valueright+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Constant ::= INT_CONST 
            {
              constantExpression RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		int value = (int)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new constantExpression(value,"int_const", valueleft+1, valueright+1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Constant ::= DOUBLE_CONST 
            {
              constantExpression RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double value = (double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new constantExpression(value, "double_const", valueleft+1, valueright+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Constant ::= CHAR_CONST 
            {
              constantExpression RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		char value = (char)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new constantExpression(value, "char_const", valueleft+1, valueright+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Constant ::= STRING_CONST 
            {
              constantExpression RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new constantExpression(value, "string_const", valueleft+1, valueright+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DefDecl ::= DEF ID LPAR ParDecls RPAR OptType Body 
            {
              DefDeclOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<ParDeclOp> params = (ArrayList<ParDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bodyFunleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyFunright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BodyOp bodyFun = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 identifierExpression idFun = new identifierExpression(id, idleft + 1, idright + 1);;
                                                                             RESULT = new DefDeclOp(idFun, params, type, bodyFun); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefDecl",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DefDecl ::= DEF ID LPAR RPAR OptType Body 
            {
              DefDeclOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bodyFunleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyFunright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BodyOp bodyFun = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 identifierExpression idFun = new identifierExpression(id, idleft + 1, idright + 1);
                                                            ArrayList<ParDeclOp> params = new ArrayList<>();
                                                           RESULT = new DefDeclOp(idFun, params, type, bodyFun); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefDecl",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ParDecls ::= ParDecl SEMI ParDecls 
            {
              ArrayList<ParDeclOp> RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParDeclOp par = (ParDeclOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ParDeclOp> params = (ArrayList<ParDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 params.add(0, par);
                                                 RESULT = params; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecls",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ParDecls ::= ParDecl 
            {
              ArrayList<ParDeclOp> RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParDeclOp param = (ParDeclOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList list = new ArrayList<ParDeclOp>();
                            list.add(0, param);
                            RESULT = list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecls",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ParDecl ::= PVars COLON Type 
            {
              ParDeclOp RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<PvarOp> param = (ArrayList<PvarOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParDeclOp(param, type); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecl",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PVars ::= PVar COMMA PVars 
            {
              ArrayList<PvarOp> RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PvarOp var = (PvarOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<PvarOp> vars = (ArrayList<PvarOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 vars.add(0, var);
                                      RESULT = vars; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PVars",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PVars ::= PVar 
            {
              ArrayList<PvarOp> RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PvarOp var = (PvarOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<PvarOp> vars = new ArrayList<PvarOp>();
                   vars.add(0, var);
                   RESULT = vars; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PVars",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PVar ::= ID 
            {
              PvarOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 identifierExpression var = new identifierExpression(id, idleft + 1, idright + 1);
                 RESULT = new PvarOp(var, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PVar",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PVar ::= REF ID 
            {
              PvarOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 identifierExpression var = new identifierExpression(id, idleft + 1, idright + 1);;
                      RESULT = new PvarOp(var, "ref"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PVar",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OptType ::= COLON Type 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = type; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OptType",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OptType ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OptType",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Body ::= LBRAC VarDecls Statements RBRAC 
            {
              BodyOp RESULT =null;
		int dichleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dichright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<varDeclOp> dich = (ArrayList<varDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int statsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<statOp> stats = (ArrayList<statOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new BodyOp(stats, dich); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // BodySwitch ::= Cases 
            {
              BodySwitchOp RESULT =null;
		int valuesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valuesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<CaseOp> values = (ArrayList<CaseOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BodySwitchOp(values); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BodySwitch",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Cases ::= Cases Case 
            {
              ArrayList<CaseOp> RESULT =null;
		int valuesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valuesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<CaseOp> values = (ArrayList<CaseOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CaseOp value = (CaseOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 values.add(value);
                                    RESULT = values; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cases",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Cases ::= Case Case Case 
            {
              ArrayList<CaseOp> RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CaseOp value1 = (CaseOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CaseOp value2 = (CaseOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int value3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int value3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CaseOp value3 = (CaseOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<CaseOp> cases = new ArrayList<>();
                         cases.add(value1);
                         cases.add(value2);
                         cases.add(value3);
                         RESULT = cases; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cases",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Case ::= Constant COLON Statements STOP SEMI 
            {
              CaseOp RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		constantExpression node = (constantExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int stastleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stastright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<statOp> stast = (ArrayList<statOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new CaseOp(node, stast); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Case",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Statements ::= Stat Statements 
            {
              ArrayList<statOp> RESULT =null;
		int stateleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stateright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		statOp state = (statOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int statsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int statsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<statOp> stats = (ArrayList<statOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 stats.add(0,state);
                                             RESULT = stats; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statements",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Statements ::= 
            {
              ArrayList<statOp> RESULT =null;
		 RESULT = new ArrayList<statOp>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statements",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Stat ::= Vars IN SEMI 
            {
              statOp RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<identifierExpression> ins = (ArrayList<identifierExpression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ReadOp(ins); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Stat ::= Exprs OUT SEMI 
            {
              statOp RESULT =null;
		int outsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int outsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<expressionNode> outs = (ArrayList<expressionNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new WriteOp(outs, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Stat ::= Exprs OUTNL SEMI 
            {
              statOp RESULT =null;
		int outsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int outsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<expressionNode> outs = (ArrayList<expressionNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new WriteOp(outs, "\\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Stat ::= Vars ASSIGN Exprs SEMI 
            {
              statOp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<identifierExpression> var = (ArrayList<identifierExpression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<expressionNode> expr = (ArrayList<expressionNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AssignOp(var, expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Stat ::= FunCallStat SEMI 
            {
              statOp RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		statOp node = (statOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = node; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Stat ::= IF LPAR Expr RPAR THEN Body ELSE Body 
            {
              statOp RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		expressionNode cond = (expressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int btrueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int btrueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		BodyOp btrue = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bfalseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bfalseright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BodyOp bfalse = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ifThenElse(cond, btrue, bfalse); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Stat ::= IF LPAR Expr RPAR THEN Body 
            {
              statOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		expressionNode expr = (expressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ifThenOp(expr,body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Stat ::= WHILE LPAR Expr RPAR DO Body 
            {
              statOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		expressionNode expr = (expressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new whileOp(expr, body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Stat ::= RETURN Expr SEMI 
            {
              statOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		expressionNode expr = (expressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new returnOp(expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Stat ::= SWITCH LPAR ID RPAR BodySwitch END SWITCH SEMI 
            {
              statOp RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		BodySwitchOp body = (BodySwitchOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 identifierExpression id = new identifierExpression(value, valueleft+1, valueright+1);
	                                                             RESULT = new SwitchOp(id, body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Vars ::= ID PIPE Vars 
            {
              ArrayList<identifierExpression> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<identifierExpression> args = (ArrayList<identifierExpression>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 identifierExpression var = new identifierExpression(id, idleft + 1, idright + 1);;
                                 args.add(0, var);
                                 RESULT = args; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Vars",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Vars ::= ID 
            {
              ArrayList<identifierExpression> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<identifierExpression> list = new ArrayList<identifierExpression>();
                   identifierExpression var = new identifierExpression(id, idleft + 1, idright + 1);
                   list.add(0, var);
                   RESULT = list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Vars",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Exprs ::= Expr COMMA Exprs 
            {
              ArrayList<expressionNode> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		expressionNode expr = (expressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<expressionNode> args = (ArrayList<expressionNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 args.add(0, expr);
                                          RESULT = args; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exprs",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Exprs ::= Expr 
            {
              ArrayList<expressionNode> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		expressionNode expr = (expressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<expressionNode> list = new ArrayList<expressionNode>();
	               list.add(0, expr);
	                RESULT = list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exprs",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FunCallExpr ::= ID LPAR Exprs RPAR 
            {
              expressionNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<expressionNode> args = (ArrayList<expressionNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 identifierExpression idFun = new identifierExpression(id, idleft +1, idright + 1);
                                          RESULT = new CallOp(idFun,args, idleft + 1, idright + 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCallExpr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FunCallExpr ::= ID LPAR RPAR 
            {
              expressionNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ArrayList<expressionNode> args = new ArrayList<>();
                            RESULT = new CallOp(new identifierExpression(id, idleft + 1, idright + 1), args, idleft + 1, idright +1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCallExpr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FunCallStat ::= ID LPAR Exprs RPAR 
            {
              statOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<expressionNode> args = (ArrayList<expressionNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 identifierExpression idFun = new identifierExpression(id, idleft + 1, idright + 1);
                                          RESULT = new FunCallStat(idFun,args); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCallStat",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FunCallStat ::= ID LPAR RPAR 
            {
              statOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 ArrayList<expressionNode> args = new ArrayList<>();
        RESULT = new FunCallStat(new identifierExpression(id, idleft + 1, idright + 1)
        , args); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCallStat",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expr ::= Expr ArithOp Expr 
            {
              expressionNode RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		expressionNode op1 = (expressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String operator = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		expressionNode op2 = (expressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new binaryExpression(operator, op1, op2, op1.getLine(), op1.getColumn()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expr ::= Expr BoolOp Expr 
            {
              expressionNode RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		expressionNode op1 = (expressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String operator = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		expressionNode op2 = (expressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new binaryExpression(operator, op1, op2, op1.getLine(), op1.getColumn()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expr ::= Expr RelOp Expr 
            {
              expressionNode RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		expressionNode op1 = (expressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String operator = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		expressionNode op2 = (expressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new binaryExpression(operator, op1, op2, op1.getLine(), op1.getColumn()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expr ::= LPAR Expr RPAR 
            {
              expressionNode RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		expressionNode node = (expressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = node; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expr ::= MINUS Expr 
            {
              expressionNode RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		expressionNode node = (expressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new unaryExpression("-", node, node.getLine(), node.getColumn()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expr ::= NOT Expr 
            {
              expressionNode RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		expressionNode node = (expressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new unaryExpression("not", node, node.getLine(), node.getColumn()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expr ::= ID 
            {
              expressionNode RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new identifierExpression(value, valueleft + 1, valueright + 1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expr ::= FunCallExpr 
            {
              expressionNode RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		expressionNode node = (expressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = node; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expr ::= Constant 
            {
              expressionNode RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		constantExpression node = (constantExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = node; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ArithOp ::= PLUS 
            {
              String RESULT =null;
		 RESULT = "+" ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArithOp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ArithOp ::= MINUS 
            {
              String RESULT =null;
		 RESULT = "-"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArithOp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ArithOp ::= TIMES 
            {
              String RESULT =null;
		 RESULT = "*"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArithOp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ArithOp ::= DIV 
            {
              String RESULT =null;
		 RESULT = "/"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArithOp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // BoolOp ::= AND 
            {
              String RESULT =null;
		 RESULT = "and"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BoolOp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // BoolOp ::= OR 
            {
              String RESULT =null;
		 RESULT = "or"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BoolOp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // RelOp ::= GT 
            {
              String RESULT =null;
		 RESULT = ">"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // RelOp ::= GE 
            {
              String RESULT =null;
		 RESULT = ">="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // RelOp ::= LT 
            {
              String RESULT =null;
		 RESULT = "<"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // RelOp ::= LE 
            {
              String RESULT =null;
		 RESULT = "<="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // RelOp ::= EQ 
            {
              String RESULT =null;
		 RESULT = "=="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // RelOp ::= NE 
            {
              String RESULT =null;
		 RESULT ="<>"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
